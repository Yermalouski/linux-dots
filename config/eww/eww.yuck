; ------------------------------------------------------------------------------------------
; ---------------------------------------- COMMANDS ----------------------------------------
; ------------------------------------------------------------------------------------------

(defvar launcher_cmd  "rofi -show drun -hover-select -me-select-entry '' -me-accept-entry 'MousePrimary' &")
(defvar bluetooth_cmd "blueberry &")
(defvar volume_cmd    "pavucontrol &")
(defvar vpn_cmd       "./scripts/vpn toggle &")
(defvar power_cmd     "./scripts/powermenu &")


; ------------------------------------------------------------------------------------------
; ------------------------------------------ BAR -------------------------------------------
; ------------------------------------------------------------------------------------------

(defwidget bar-widget []                                                        ; Bar
  (centerbox :orientation "h"
    (box :class "start"
      :halign "start"
      (start))
    (box :halign "center"
      :class "center"
      (center))
    (box :halign "end"
      :class "end"
      (end))))

(defwidget start []                                                             ; Left Widgets
  (box :orientation "h"
    :space-evenly false
    :spacing "8"
    (launcher)(workspace)(music)))

(defwidget center []                                                            ; Center Widgets
  (box :orientation "h"
    :space-evenly false
    :spacing "8"
    (clock)(date)))

(defwidget end []                                                               ; Right Widgets
  (box :orientation "h"
    :space-evenly false
    :spacing "8"
    (battery)(systemtray)(powermenu)))


; ------------------------------------------------------------------------------------------
; ---------------------------------------- WIDGETS -----------------------------------------
; ------------------------------------------------------------------------------------------

(defwidget launcher []                                                          ; App Menu
  (button :class "launcher-icon metric"
    :tooltip "Rofi launcher"
  :onclick launcher_cmd  ""))

;; workspaces

(defwidget workspace[]
  (box :class "metric workspace"
       :space-evenly false
  (label :class "workspace-icon"
       :text "")
  (label :class "workspace-text"
       :text "${workspace}"
       :halign "center")))

(defpoll workspace :interval "0.5s" :initial "1"
  "bash ~/.config/eww/scripts/workspace.sh")

;; music                                                                        ; Music Container
(defwidget music []
  (box :class "metric"
    :orientation "h"
    :space-evenly false
    :spacing "0"
    (music-prev)(music-playpause)(music-skip)))

(defwidget music-playpause []                                                   ; Play
  (button :class "playpause-icon"
    :onclick "playerctl play-pause -p spotify"
    :tooltip "Toggle track"
  {music-status == "Playing" ? "" : ""}))

(defwidget music-skip []                                                        ; Skip
  (button :class "skip-icon"
    :onclick "playerctl next -p spotify"
    :tooltip "Skip track"
  ""))

(defwidget music-prev []                                                        ; Previous
  (button :class "prev-icon"
    :onclick "playerctl previous -p spotify"
    :tooltip "Previous track"
  ""))

(defpoll music-status :interval "1s" "playerctl -p %any -p spotify status")

(defwidget clock []                                                             ; Clock
  (box :class "metric time-clock"
    (box :orientation "h"
      :halign "center"
      (label :text time :class "time"))))

(defpoll time :interval "10s" "date '+%H:%M'")

(defwidget date []                                                              ; Date
  (box :class "metric date-clock"
    (box :orientation "h"
      :halign "center"
      (label :text date :class "date"))))

(defpoll date :interval "10s" "date '+%d.%m.%y'")

;; systemtray
(defwidget systemtray []
  (box :class "metric"
    :orientation "h"
    :space-evenly false
    :spacing "0"

    (memory)(bluetooth)(mic)(brightness)(volume)))

;; (defwidget battery[]())

;; (defpoll battery :interval "10s" "bash ~/.config/eww/scripts/battery.sh")

(defwidget battery []
  (box :class "metric battery"
    :space-evenly false
    (label :class "battery-icon"
           :text "")
    (label :class "battery-text"
           :text "${EWW_BATTERY["BAT0"].capacity}%" :halign "center")))

;; memory
(defwidget memory []
  (button :class "memory-icon"
    :tooltip "Memory used: ${memory_percent}%"
    :visible "${memory_percent > 85 ? "true" : "false"}"
  ""))

(defpoll memory_percent :interval "1s" "free -m | grep Mem | awk '{print ($3/$2)*100}' | cut -d'.' -f1")


;; bluetooth
(defwidget bluetooth []
  (button :class "bluetooth-icon ${bluetooth_status == "1" ? "bluetooth-on" : bluetooth_status == "2" ? "bluetooth-connected" : "bluetooth-off"}"
    :onclick bluetooth_cmd
    :tooltip "Bluetooth"
  ""))

(defpoll bluetooth_status :interval "5s" "./scripts/bluetooth")


;; mic
(defwidget mic []
  (button :class "mic-icon ${mic_status == "no" ? "mic-on" : "mic-off"}"
    :onclick "pactl set-source-mute @DEFAULT_SOURCE@ toggle"
    :tooltip "Microphone"
  ""))

(defpoll mic_status :interval "5s" "pactl list sources | grep -m 1 Mute | tail -n 1 | awk '{print $2}'")

;; vpn
(defwidget vpn []
  (button :class "vpn-icon ${vpn_status == "1" ? "vpn-on" : "vpn-off"}"
    :onclick vpn_cmd
    :tooltip "VPN"
  ""))

(defpoll vpn_status :interval "5s" "./scripts/vpn status")


;; volume
(defwidget volume []
  (eventbox :onhover "eww update volume_reveal=true"
    :onhoverlost "eww update volume_reveal=false"
    (box :orientation "h"
      :space-evenly false
      (revealer :transition "slideleft"
        :reveal volume_reveal
        :duration "621ms"
        (scale :class "volume-slider"
          :value current_volume
          :tooltip "Volume: ${current_volume}%"
          :onchange "pactl set-sink-volume @DEFAULT_SINK@ {}%"
          :orientation "h"
          :flipped true
          :max 101
        :min 0))
      (button :class "volume-icon"
        :onclick volume_cmd
      {current_volume == 0 ? "" : ""}))))

(defpoll current_volume :interval "1s" "amixer -D pulse sget Master | grep 'Left:' | awk -F'[][]' '{ print $2 }' | tr -d '%'")
(defvar volume_reveal false)


;; brightness
(defwidget brightness []
  (eventbox :onhover "eww update br_reveal=true"
    :onhoverlost "eww update br_reveal=false"
    (box :orientation "h"
      :space-evenly false
      (revealer :transition "slideleft"
        :reveal br_reveal
        :duration "621ms"
        (scale :class "brightness-slider"
          :value brightness_percent
          :tooltip "Brightness: ${brightness_percent}%"
          :onchange
          "if [ {} -lt 20 ]; then
          xrandr --output eDP-1 --brightness 0.20
          brightness_percent=20   # Ensure slider reflects the actual brightness
          else
          xrandr --output eDP-1 --brightness $(echo \"scale=2; {}/100\" | bc)
          brightness_percent={}   # Update slider to reflect the new brightness
          fi"
          :orientation "h"
          :flipped true
          :max 101
        :min 0))
      (button :class "brightness-icon"
      {brightness_percent == 0 ? "" : ""}))))

(defpoll brightness_percent :interval "1s" "xrandr --verbose | grep -i brightness | awk -F': ' '{print $2*100}'")
(defvar br_reveal false)


;; powermenu
(defwidget powermenu []
  (button :class "poweroff-icon metric"
    :onclick power_cmd
  ""))


; ------------------------------------------------------------------------------------------
; ---------------------------------------- WINDOW ------------------------------------------
; ------------------------------------------------------------------------------------------

(defwindow bar
  :stacking "bg"
  :monitor 0
  :geometry (geometry :x 0 :y 10 :width "1900px" :height "30px" :anchor "top center")
  :reserve (struts :distance "60px" :side "top") (bar-widget))
